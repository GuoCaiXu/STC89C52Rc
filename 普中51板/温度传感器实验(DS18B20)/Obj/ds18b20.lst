C51 COMPILER V9.60.0.0   DS18B20                                                           11/04/2022 17:08:15 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Obj\ds18b20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE App\DS10B20\ds18b20.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\App\smg;.\Public
                    -;.\App\DS10B20) DEBUG OBJECTEXTEND PRINT(.\Obj\ds18b20.lst) TABS(2) OBJECT(.\Obj\ds18b20.obj)

line level    source

   1          # include "ds18b20.h"
   2          
   3          //复位
   4          void ds18b20_reset(){
   5   1          DS18B20_IO = 0;
   6   1          public_us_delay(75);
   7   1          DS18B20_IO = 1;
   8   1          public_us_delay(2);
   9   1      }
  10          
  11          //检测DS18B20 是否存在
  12          uchar ds18b20_check(){
  13   1      
  14   1          uchar time_temp = 0;
  15   1          while(DS18B20_IO && time_temp < 20){
  16   2              time_temp ++;
  17   2              public_us_delay(1);
  18   2          }
  19   1          if (time_temp >= 20) return 1;
  20   1          else time_temp = 0;
  21   1          //0 检测到ds18b20 响应， 1 为响应超时和非响应
  22   1      
  23   1          while((!DS18B20_IO) && time_temp < 20){
  24   2              time_temp ++;
  25   2              public_us_delay(1);
  26   2          }
  27   1          if (time_temp >= 20) return 1;
  28   1          return 0;
  29   1      }
  30          
  31          //读位函数
  32          uchar ds18b20_read_bit(){
  33   1      
  34   1          uchar dat = 0;
  35   1          DS18B20_IO = 0;
  36   1          _nop_(); _nop_();  //2 us
  37   1          DS18B20_IO = 1;
  38   1          if (DS18B20_IO) dat = 1;
  39   1          else dat = 0;
  40   1          public_us_delay(5);
  41   1          return dat;
  42   1      }
  43          
  44          //读字节数据
  45          uchar ds18b20_read_byte(){
  46   1          uchar i;
  47   1          uchar temp = 0;
  48   1          uchar dat  = 0;
  49   1          for (i = 0; i < 8; i++){
  50   2              temp = ds18b20_read_bit();
  51   2              dat = (temp << 7) | (dat >> 1);
  52   2          }
  53   1          return dat;
  54   1      }
C51 COMPILER V9.60.0.0   DS18B20                                                           11/04/2022 17:08:15 PAGE 2   

  55          
  56          //写函数
  57          void ds18b20_write_byte(uchar dat){
  58   1          uchar i;
  59   1          uchar temp = 0;
  60   1          for (i = 0; i < 8; i++){
  61   2              temp = dat & 0x01;
  62   2              dat >>= 1;
  63   2              if (temp) {
  64   3                  DS18B20_IO = 0;
  65   3                  //一个_nop_() 函数代表一个um (微秒)
  66   3                  _nop_();
  67   3                  _nop_();
  68   3                  DS18B20_IO = 1;
  69   3                  public_us_delay(6);
  70   3              }
  71   2              else {
  72   3                  DS18B20_IO = 0;
  73   3                  public_us_delay(6);
  74   3                  DS18B20_IO = 1;
  75   3                  _nop_();
  76   3                  _nop_();
  77   3              }
  78   2          }
  79   1      }
  80          
  81          
  82          //温度转化函数
  83          void ds18b20_start(){
  84   1      
  85   1          ds18b20_reset();
  86   1          ds18b20_check();
  87   1          ds18b20_write_byte(0xcc);
  88   1          ds18b20_write_byte(0x44);
  89   1      }
  90          
  91          //初始化时序
  92          uchar ds18b20_init(){
  93   1          ds18b20_reset();
  94   1          return ds18b20_check();
  95   1      }
  96          
  97          //返回温度
  98          float ds18b20_read_temperture(){
  99   1      
 100   1          float temp;
 101   1          uchar dath = 0;
 102   1          uchar datl = 0;
 103   1          uint value = 0;
 104   1      
 105   1          ds18b20_start();
 106   1          ds18b20_reset();
 107   1          ds18b20_check();
 108   1          ds18b20_write_byte(0xcc);
 109   1          ds18b20_write_byte(0xbe);
 110   1      
 111   1          datl = ds18b20_read_byte();
 112   1          dath = ds18b20_read_byte();
 113   1          value = (dath << 8) + datl;
 114   1      
 115   1          //判断温度是-还是+
 116   1          if ((value & 0xf800) == 0xf800){
C51 COMPILER V9.60.0.0   DS18B20                                                           11/04/2022 17:08:15 PAGE 3   

 117   2      
 118   2              value = (~value) + 1;
 119   2              temp = value * (-0.0625);
 120   2          }
 121   1          else {
 122   2              temp = value * 0.0625;
 123   2          }
 124   1      
 125   1          return temp;
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    375    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
