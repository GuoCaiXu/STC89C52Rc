C51 COMPILER V9.60.0.0   DS18B20                                                           11/03/2022 16:33:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Obj\ds18b20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE App\DS10B20\ds18b20.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\App\smg;.\Public
                    -;.\App\DS10B20) DEBUG OBJECTEXTEND PRINT(.\Obj\ds18b20.lst) TABS(2) OBJECT(.\Obj\ds18b20.obj)

line level    source

   1          # include "ds18b20.h"
   2          
   3          //复位
   4          void ds18b20_reset(){
   5   1          DS18B20_IO = 0;
   6   1          public_us_delay(75);
   7   1          DS18B20_IO = 1;
   8   1          public_us_delay(2);
   9   1      }
  10          
  11          //检测DS18B20 是否存在
  12          uchar ds18b20_check(){
  13   1      
  14   1          uchar time_temp = 0;
  15   1          while(DS18B20_IO && time_temp < 20){
  16   2              time_temp ++;
  17   2              public_us_delay(1);
  18   2          }
  19   1          if (time_temp >= 20) return 1;
  20   1          else time_temp = 0;
  21   1          //0 检测到ds18b20 响应， 1 为响应超时和非响应
  22   1      
  23   1          while((!DS18B20_IO) && time_temp < 20){
  24   2              time_temp ++;
  25   2              public_us_delay(1);
  26   2          }
  27   1          if (time_temp >= 20) return 1;
  28   1          return 0;
  29   1      }
  30          
  31          //初始化时序
  32          uchar ds18b20_init(){
  33   1          ds18b20_reset();
  34   1          return ds18b20_check();
  35   1      }
  36          
  37          //写函数
  38          void ds18b20_write_byte(uchar dat){
  39   1          uchar i;
  40   1          uchar temp = 0;
  41   1          for (i = 0; i < 8; i++){
  42   2              temp = dat & 0x01;
  43   2              dat >>= 1;
  44   2              if (temp) {
  45   3                  DS18B20_IO = 0;
  46   3                  //一个_nop_() 函数代表一个um (微秒)
  47   3                  _nop_();
  48   3                  _nop_();
  49   3                  DS18B20_IO = 1;
  50   3                  public_ms_delay(6);
  51   3              }
  52   2              else {
  53   3                  DS18B20_IO = 0;
  54   3                  public_us_delay(6);
C51 COMPILER V9.60.0.0   DS18B20                                                           11/03/2022 16:33:30 PAGE 2   

  55   3                  DS18B20_IO = 1;
  56   3                  _nop_();
  57   3                  _nop_();
  58   3              }
  59   2          }
  60   1      }
  61          
  62          //读位函数
  63          uchar ds18b20_read_bit(){
  64   1      
  65   1          uchar dat = 0;
  66   1          DS18B20_IO = 0;
  67   1          _nop_(); _nop_();  //2 us
  68   1          DS18B20_IO = 1;
  69   1          if (DS18B20_IO) dat = 1;
  70   1          else dat = 0;
  71   1          public_us_delay(5);
  72   1          return dat;
  73   1      }
  74          
  75          //读字节数据
  76          uchar ds18b20_read_byte(){
  77   1          uchar i;
  78   1          uchar temp = 0;
  79   1          uchar dat  = 0;
  80   1          for (i = 0; i < 8; i++){
  81   2              temp = ds18b20_read_bit();
  82   2              dat = (temp << 7) | (dat >> 1);
  83   2          }
  84   1          return dat;
  85   1      }
  86          
  87          //温度转化函数
  88          void ds18b20_start(){
  89   1      
  90   1          ds18b20_reset();
  91   1          ds18b20_check();
  92   1          ds18b20_write_byte(0xcc);
  93   1          ds18b20_write_byte(0x44);
  94   1      }
  95          
  96          //返回温度
  97          float ds18b20_read_temperture(){
  98   1          uchar dath = 0;
  99   1          uchar datl = 0;
 100   1          uint value = 0;
 101   1          float temp;
 102   1      
 103   1          ds18b20_start();
 104   1          ds18b20_reset();
 105   1          ds18b20_check();
 106   1          ds18b20_write_byte(0xcc);
 107   1          ds18b20_write_byte(0xbe);
 108   1      
 109   1          datl = ds18b20_read_byte();
 110   1          dath = ds18b20_read_byte();
 111   1          value = (dath << 8) + datl;
 112   1      
 113   1          //判断温度是-还是+
 114   1          if (value&0xf800 == 0xf800){
 115   2      
 116   2              value = (~value) + 1;
C51 COMPILER V9.60.0.0   DS18B20                                                           11/03/2022 16:33:30 PAGE 3   

 117   2              temp = value * (-0.0625);
 118   2          }
 119   1          else {
 120   2              temp = value * 0.0625;
 121   2          }
 122   1      
 123   1          return temp;
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    371    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
